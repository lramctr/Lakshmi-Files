<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 -->
    <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
  </configSections>
  <connectionStrings>
    <add name="NpsCdsContext" connectionString="data source=Fhfl15vmgisweb;initial catalog=NPS_CDS;integrated security=True;MultipleActiveResultSets=True;App=EntityFramework"
      providerName="System.Data.SqlClient" />
  </connectionStrings>
  <!--
    For a description of web.config changes see http://go.microsoft.com/fwlink/?LinkId=235367.

    The following attributes can be set on the <httpRuntime> tag.
      <system.Web>
        <httpRuntime targetFramework="4.5.2" />
      </system.Web>
  -->
  <system.web>
    <!-- 
        Set compilation debug="true" to insert debugging 
        symbols into the compiled page. Because this 
        affects performance, set this value to true only 
        during development.
    -->
    <compilation debug="true" targetFramework="4.5.2" />
    <!--
        The <authentication> section enables configuration 
        of the security authentication mode used by 
        ASP.NET to identify an incoming user.

        Note, the Pivot CTP1 desktop application does not support the Windows authentication
        mode, so the authentication mode is set to None here.
        The Silverlight PivotViewer control is able to use any type of authentication.
        If your collection application is only using the Silverlight PivotViewer and requires 
        access to resources (files, databases, web services) using the Windows credentials of
        the person using the application, set the authentication mode to Windows.
    -->
    <authentication mode="None" />
    <!--<authentication mode="Windows"/>-->
    <!--
        The <customErrors> section enables configuration 
        of what to do if/when an unhandled error occurs 
        during the execution of a request. Specifically, 
        it enables developers to configure html error pages 
        to be displayed in place of a error stack trace.

        <customErrors mode="RemoteOnly" defaultRedirect="GenericErrorPage.htm">
            <error statusCode="403" redirect="NoAccess.htm" />
            <error statusCode="404" redirect="FileNotFound.htm" />
        </customErrors>
    -->
    <customErrors mode="RemoteOnly" />
    <pages controlRenderingCompatibilityVersion="4.0" />
  </system.web>
  <system.webServer>
    <!-- IIS uses these handler configuration values -->
    <handlers>
      <!--
            A generic handler that responds to requests for any CXML.
            You may leave this section as is, and place your collection factory assemblies into the
            bin folder of this ASP.NET Application for them to be used.
            Alternatively, you may add classes that implement the IHttpHandler (or HttpAsyncHandler)
            interface yourself and replace the generic handler below with the handlers specific to
            your CXML path.
            See the HttpHandler.cs source file for the generic implementation.
        -->
      <add name="CXML" path="*.cxml" verb="GET" type="PivotServer.CxmlHandler" />
      <!-- Deep Zoom Collection and Deep Zoom Image XML and image handlers -->
      <add name="DZC" path="*.dzc" verb="GET" type="PivotServer.DzcHandler" />
      <add name="DZI" path="*.dzi" verb="GET" type="PivotServer.DziHandler" />
      <add name="DeepZoomImage" path="*/dzi/*_files/*/*_*.jpg" verb="GET" type="PivotServer.DeepZoomImageHandler" />
      <add name="ImageTile" path="*_files/*/*_*.jpg" verb="GET" type="PivotServer.ImageTileHandler" />
    </handlers>
    <staticContent>
      <mimeMap fileExtension=".cxml" mimeType="text/cxml" />
      <mimeMap fileExtension=".dzc" mimeType="text/xml" />
      <mimeMap fileExtension=".dzi" mimeType="text/xml" />
    </staticContent>
  </system.webServer>
  <entityFramework>
    <defaultConnectionFactory type="System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework">
      <parameters>
        <parameter value="mssqllocaldb" />
      </parameters>
    </defaultConnectionFactory>
    <providers>
      <provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" />
    </providers>
  </entityFramework>
</configuration>